/* C++ libraries to include */
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <limits>
#include <iostream>
#include <iterator>
#include <sstream>
#include <stdio.h>
#include <string>
#include <time.h>
#include <vector>

#include <Rcpp.h>

// [[Rcpp::depends(BH)]]
#include <boost/random.hpp>
#include <boost/math/distributions.hpp>
#include <boost/generator_iterator.hpp>
#include <boost/random/uniform_real.hpp>
#include <boost/random/variate_generator.hpp>
#include <boost/generator_iterator.hpp>
#include <boost/math/common_factor.hpp>

using namespace std;
using namespace Rcpp;

/*----------------------------*/
/*- header -------------------*/
/*----------------------------*/
// definition of rng for seeding later in main
typedef boost::mt19937 rng_type;
extern rng_type rng_bf;
rng_type rng_bf;

// type definition for probability distributions
typedef boost::uniform_real<double> Dunif;
typedef boost::uniform_int<int> Dunif_int;
typedef boost::gamma_distribution<double> Dgamma;
typedef boost::random::weibull_distribution<double> Dweibull;
typedef boost::bernoulli_distribution<double> Dbern;
typedef boost::normal_distribution<double> Dnorm;
//typedef boost::exponential_distribution<double> Dexp;
typedef boost::math::gamma_distribution<double> gamma_mdist; //gamma_mdist(shape, scale)
typedef boost::math::exponential_distribution<double> exp_mdist; //exp_mdist(rate)
typedef boost::math::weibull_distribution<double> weibull_mdist; //weibull_mdist(shape, scale)



inline double runif(double x0, double x1, rng_type& rng_arg) {
	boost::variate_generator<rng_type &, Dunif > rndm(rng_arg, Dunif(x0, x1));
	return rndm();
}

inline int runif_int(int x0, int x1, rng_type& rng_arg)
{
	boost::variate_generator<rng_type &, Dunif_int > rndm(rng_arg, Dunif_int(x0, x1));
	return rndm();
}

inline double rgamma(double shape, double scale, rng_type& rng_arg) {
	boost::variate_generator<rng_type &, Dgamma > rndm(rng_arg, Dgamma(shape, scale));
	return rndm();
}

double rweibull(double scale, double shape, rng_type& rng_arg) { //note reversed scale and shape from boost itself (shape=1.0 for exponential distribution)
	boost::variate_generator<rng_type &, Dweibull > rndm(rng_arg, Dweibull(shape, scale));
	return rndm();
}

inline int rbern(double p, rng_type& rng_arg) {
	boost::variate_generator<rng_type &, Dbern > rndm(rng_arg, Dbern(p));
	return rndm();
}

inline double rnorm(double mean, double sd, rng_type& rng_arg) {
	boost::variate_generator<rng_type &, Dnorm > rndm(rng_arg, Dnorm(mean, sd));
	return rndm();
}

/*
inline double rexp(double rate, rng_type& rng_arg) { //try this one
	boost::variate_generator<rng_type &, Dexp > rndm(rng_arg, Dexp(rate));
	return rndm();
}
*/


// empirical distribution random sampler (depends on runif function)
inline int edf_sample_bf(vector<double> vec, rng_type& rng_arg)
{
	double s = 0;
	vector<double> edf; // dynamic vector
	for (int k = 0; k < (int)(vec.size()); k++)
	{
		s += vec[k];
		edf.push_back(s);
	}
	double u = s * runif(0.0, 1.0, rng_arg);
	vector<double>::iterator low;
	low = lower_bound(edf.begin(), edf.end(), u); // fast search for where to locate u in vector
	int i = int(low - edf.begin());
	return i;  // index from 0 of sampled element that u is within range
}


/*-------------------------------------------------------*/
///// round a double to y decimal places
double roundx(double x, int y) {
	x = round(x * pow(10, y)) / pow(10, y);
	return x;
}


/// --------------------------------------------------------------------------
/// Create additional functions
/// --------------------------------------------------------------------------

/// modulus function (time into calendar day)
double mod(double a, double b, double c){
	int out = std::fmod(a,b);
	while(out < c) {
	out = out + b;
 	}
  	return(out);
}

// which function
std::vector<int> whichFunc(std::vector<int> x, int y) {
	std::vector<int> rval;
	for (unsigned int i = 0; i < x.size(); i++) {
		if (x[i] == y) { rval.push_back(i); }
	}
	return(rval);
}

/*----------------------------------------------------------*/
/*- Main call of function to export & inputs from R --------*/
/*----------------------------------------------------------*/

  // [[Rcpp::export]]
//Rcpp::List qFmixDistArray(std::vector<double> par) {
Rcpp::NumericMatrix qFmixDistArray(std::vector<double> par) {

/*----------------------------*/
/*- int main -----------------*/
/*----------------------------*/

	// Initialize a random number generator.
	// This constructor seeds the generator with the current time.
	double seed = par[7];
	rng_type rng(seed);

    //initialize starting and end time
	double t_start = 103;
	double t_end = 365*25;

	std::vector<double> ventry = { -415.6533005,-50.4527076,323.7114513,-780.506284,-1143.168049,-1145.549106,-769.991811,324.3577642,-1116.026045,316.6631634,-415.3657117,-401.3535288,-51.4936158,-51.9440222,-1146.149333,-51.7674739,-414.1405444,-46.1001374,-781.3457586,-50.7811146,-1144.034849,-51.5611121,-407.8051086,318.0237796,-764.9828865,-50.2723721,-416.7284998,317.4848923,-45.68921,313.6589605,-47.2010504,315.2140799,-413.2647608,-408.3864726,-51.6378105,-781.7052332,-781.5483294,-780.9955589,316.3781228,-51.837112,-407.0085108,-49.84186,314.6076279,-48.5547914,-51.0365216,-409.7518801,-39.9808175,314.4366538,-415.6853946,313.2292465,314.5871486,-414.5737284,-51.4017397,-1145.012607,-776.1751822,-409.9450688,-49.0418658,-411.7217858,-1139.687503,-46.9819964,-1144.664939,314.7017488,-416.8359109,-416.5500125,-1867.14714,-780.374772,313.7913422,-45.6748496,-50.7214761,-1141.256061,-45.3063578,-775.3477979,-781.977688,-414.1982258,-51.8466871,-410.3369357,315.8022398,-48.7258059,-49.8579127,314.5307483,-412.0495169,-408.4488305,314.3569422,-777.3451095,-781.7542493,-48.0386603,-781.8914422,-51.066571,-36.6218129,-51.4099317,315.4630608,-773.8998533,-774.7460769,-50.5554449,-778.7111972,-47.0419629,314.9018101,-49.0227001,-50.467578,-48.7280176,-51.7115067,-49.9230247,-48.738068,-781.6775372,-780.454826,-415.9699039,-51.9835024,-49.9908868,-413.5633797,-48.4940818,-47.264302,-413.2904201,-48.9961582,-41.686677,-413.753362,321.6481715,-778.6156652,-408.2902599,-1142.263259,-31.8626373,-43.9007181,-1134.059332,-49.1683193,-409.7246236,-45.0559087,-35.9627191,315.2754049,-1510.769419,-409.7521958,-51.4859496,-416.9703393,-415.3396891,313.2247949,-49.5669479,-51.2808743,-45.4246028,-777.1352365,316.9194908,-50.624742,-403.1332274,-781.4020035,-414.063473,-775.7359035,-404.9270433,-51.3818464,-778.5403128,-51.4975259,-49.8790018,-40.1505402,-1511.579442,-409.2374424,-1506.581541,-415.2145137,-781.4706998,-44.9108209,314.6565359,-1511.386481,314.4996824,-415.8978906,-1145.615399,313.6446155,-47.0997561,-51.4366734,-412.6180685,-416.9475233,-39.1347117,-48.2141948,-781.9509018,-43.6683242,-411.1868815,-781.6521511,314.0848506,-1506.70728,-409.8230314,-48.2210362,-46.8401415,-51.4802979,-45.703347,-50.3362693,-781.2185756,313.0057334,-1142.39021,315.7044889,-769.4143674,-49.8791938,-46.9202202,-1143.097399,-405.5221465,-1146.273889,-47.1990022,-778.761602,-415.6065617,320.4245749,315.4112332,-412.5266106,-49.2277344,-1146.575024,-771.2801971,-44.5168364,-779.6689788,-411.7552008,-51.5176108,-45.0378698,-775.1026243,-416.5535752,-410.6675692,-780.2438569,-51.9090893,-413.5720123,-413.5938323,-1143.02336,-778.0702015,-50.113473,-1872.25817,-415.6531983,-51.9403312,-415.6812513,-51.3986977,-413.8256515,-414.2007776,-412.9116762,-50.8226284,314.2570334,316.235243,317.0680151,-51.9593128,-48.3405426,-416.9576101,-416.549729,-1146.480848,-415.3504233,-48.1772464,-39.8141805,314.6235816,-412.9071314,-44.735992,-51.2336461,-32.0327673,-48.1715115,-44.6035717,-414.3400677,-406.1402277,-773.9502932,-51.1490362,-45.9941045,-50.7403625,-1507.444846,-40.3514946,-51.9698192,-416.3748893,-45.5064737,-779.1372487,-408.6384444,-48.5346484,327.1605874,-773.738331,-773.8918732,-406.2016784,-415.2459109,-775.0853443,-48.0322887,-766.4164268,-412.7769447,-414.1160545,-51.3877507,-780.7731449,-415.9458058,-42.7725316,-779.2388039,-410.480901,-781.3898932,322.1105689,-412.1347209,-31.8897565,-1144.623808,328.9069818,-42.9689338,-413.1470305,-413.8763585,-412.0397844,-415.4507785,-49.7212184,-415.6821984,-42.3585278,-51.4697894,-416.7030468,-1142.814331,-777.329344,-780.6492963,315.4068964,314.4397703,-779.2361201,-1144.012948,-781.7306004,313.9004107,-48.7438638,-46.7540289,321.6062855,-49.872368,-416.3978119,-413.2644041,-1142.748282,-1510.978826,-48.5089657,-412.2726644,-50.2655636,-402.2027835,-416.0235381,318.5173174,-414.9661516,-415.6179891,-46.9496569,318.7948292,322.4829741,-767.7377851,-1130.137792,-412.9726942,-45.5727164,313.9239944,-780.8302859,316.8705696,-44.4616901,-415.3494155,-50.9783406,-50.4590536,-780.7269344,-41.3821185,314.1839361,-414.7305601,-780.4756862,-412.1815167,-42.927506,-400.2730348,-413.1553328,-779.8525642,-414.7468537,-781.9204489,-766.9413526,-51.6782654,-409.9882266,324.5488599,315.4369642,-46.9929326,-412.0737291,-409.5091627,-51.3269207,-50.6969221,-408.8044421,317.4444951,-775.7622526,-409.2518819,-778.9750227,-410.8282407,-44.0969622,-412.0704273,-776.1868369,-49.707475,-49.494322,-415.250328,-1146.915835,-777.1862838,-410.8684057,-776.1127919,-46.6131729,331.7245984,-51.5370758,-43.5554498,-394.3449606,-412.2767063,-415.0007905,-781.7634558,-769.4232135,-44.8122747,-412.2874782,-780.5983499,-777.5777694,-50.2215191,-411.4700642,-400.3697535,-49.7137531,-780.0503557,-407.8901302,-51.8433183,-35.9389601,-781.1678579,-781.4895215,-415.7948454,-45.231353,-404.7693715,-402.7028915,-49.6038397,-46.2936009,-51.9308637,-410.4150596,-50.2552376,315.2436752,-413.3056453,319.5403434,-1145.601482,-51.8630942,-51.2479731,-405.1376387,-51.3355455,-777.5701883,-416.6187688,-51.0733034,-1876.942642,-51.179434,326.8557004,-45.0698782,-51.3198427,-46.2158478,-779.4094954,319.8055792,-398.0884325,-776.3983756,-414.7784106,-415.4724542,-401.3787644,319.1699465,-48.7958967,-51.7266437,-781.8686349,-409.2633251,-1146.084925,313.6951459,-399.4740037,-406.8732683,-413.6255815,-51.800077,-415.998009,-416.06581,-416.631923,-1144.923169,-416.9264384,-416.9605651,-415.1804729,-414.1610626,-415.253524,-48.145731,-34.4903969,-44.6952663,315.5832692,-402.9040637,-51.6244888,-413.7544096,-46.4981442,-416.9192757,-50.9872015,-51.4522377,-415.1749276,-50.1805461,-778.8204553,314.1929304,-778.5192104,-415.1568665,-1146.955015,-48.3408204,-44.5804635,-414.637637,-776.8366127,317.0964635,-1143.516036,322.0915138,-46.0365298,-413.9666848,-37.4883971,-772.4000646,-409.8653564,-51.9852165,-47.2073397,-410.4582095,-414.9572175,-42.9344645,326.3265949,-51.5294983,-1510.364274,-415.3225378,-779.2656436,-767.3550237,-416.4556176,314.5668702,314.673578,-44.5025602,-50.4453683,313.2851383,-413.6051115,-51.8207644,-37.8913979,-405.0042685,-50.2645278,313.1363603,-416.6623267,315.3208471,-1146.517795,317.9813091,-35.8416725,-50.0239524,-1146.993038,-1143.354774,-44.0854256,-26.718119,-33.5740344,-1146.823294,-760.7446216,-780.2490884,-412.4910803,-403.2683426,313.4924298,-416.630295,-775.0157998,-780.1622724,-416.6507701,-407.3153995,-1145.459495,-778.3276141,-50.1691842,-51.6685197,317.2971667,-399.729227,-414.7864238,-415.7553888,317.197563,-48.3666049,-775.278447,-45.1628853,331.4302483,-413.7052457,316.3432597,-42.0517969,-42.5998197,-412.5545706,-415.0707924,-416.8057754,-403.7156034,-50.6507615,-780.7471721,-413.2256479,-414.5182815,319.848985,326.4579661,-48.592858,-408.7507584,-51.5699019,-778.4831846,-49.4065077,-47.0433281,-43.040591,-1143.618033,-407.1996458,320.6955107,-780.3201155,-51.0832293,-410.5775631,-408.794379,319.270586,-47.9402394,-46.711109,-414.4244327,-775.0804314,-46.7571973,-416.6326666,313.6616025,-414.608366,-51.95544,-402.7290276,313.6473504,-44.3087937,-45.1857471,-776.4057319,315.1468629,-780.2290305,-414.9171769,-47.3417618,-415.5849055,313.475327,-395.759963,-415.6044896,-416.5657892,-46.9177307,-48.0064023,-415.7901061,318.2239661,-45.8051606,-1146.534752,-775.3151371,-408.1125834,-51.1466279,-51.2820247,-414.1509527,-409.9711023,-47.8176893,-416.9152694,-1508.428194,316.690859,-45.4739482,-413.9368805,-414.83262,-416.1528041,-48.8019583 };
	std::vector<double> vexit = { 253.5889952,769.3173374,-32.0376895,875.9991029,237.5422918,329.5085867,803.1568247,57.79187981,431.4671308,-5.9590933,257.6141921,601.72232,1321.509129,1887.774045,628.5945184,436.0493472,1145.771107,407.0597114,233.8047936,236.8499579,192.1036184,945.6076445,622.0994739,-26.8661408,238.5742002,1249.931438,111.2725834,-26.7689486,361.3086518,65.31170457,492.4477735,63.31452938,643.1450334,170.7446376,1578.023564,600.8530216,335.8245817,1771.306664,80.38999638,525.0376326,206.1599648,807.4538747,3.18274028,621.003912,447.1352001,727.9711056,716.284236,-50.0652477,485.38893,80.3579581,-26.6048665,166.9356092,351.3516129,114.4009316,131.6667563,618.1846362,250.7692064,1654.173039,159.767386,840.3940276,292.6697138,-0.0521743,288.7367983,185.0465129,524.5442692,352.2208717,33.83478888,1577.446431,1484.401713,149.4751033,460.4379832,164.5763069,130.8604427,115.4425143,1962.700152,1157.68544,-44.6383901,539.7875602,1401.734196,15.52443056,669.6649236,195.3760432,38.4944119,420.2736126,1088.849649,1517.723403,538.9689832,342.0668037,583.0190586,1075.270347,22.3047367,275.229352,410.5798241,1485.264061,147.63273,1040.347651,21.88289882,2176.201612,626.474892,1123.867697,971.7516638,110.738037,926.7747122,193.5934664,429.0733523,147.0138967,410.7143174,1258.4019,797.3852517,469.8535315,1187.710698,1000.843334,629.4930963,514.3113651,1106.389173,83.57856176,426.1825373,557.5767527,165.8495085,645.1364963,1235.9837,312.2683953,637.1656379,468.8308903,846.8251614,512.5253081,98.58984608,194.9714269,230.2107055,944.4753662,286.2244551,258.5101851,17.0252336,657.4284783,339.8694707,892.0547276,1855.396035,28.18823844,538.6520259,448.2359708,813.2097233,1828.447987,157.7932481,633.2616558,1039.943045,428.4114699,679.8664396,790.9089522,928.9629992,225.8505696,593.6853121,559.5348058,189.0503769,118.962479,824.1542985,-26.421775,486.1150355,40.35571155,188.7081144,225.0517017,35.4136268,994.4251901,225.0943337,255.8441252,476.5990589,762.888627,1027.502389,490.9919521,534.4706747,954.7123137,1352.13179,22.93842725,284.1419347,794.9931126,976.7136714,181.8724718,620.3894896,827.0339775,1023.28353,323.4617846,90.55007875,384.1269493,-23.5514234,477.5737792,1611.017967,219.4507978,138.1639813,1054.121386,1066.870066,2488.340153,144.6508447,886.6123193,-18.2145128,85.34750973,859.0872877,575.9618486,853.4875087,735.0157014,504.7313845,1007.154179,207.7492853,1493.603736,158.9503088,808.6271778,1074.075516,374.2297238,773.6420543,258.5785851,1266.704499,895.1871434,589.5123995,142.3911055,810.5550235,135.197635,634.3301642,179.478157,264.8604129,313.4548335,753.3757092,1672.139537,174.6165151,479.8258591,29.42470648,-31.0040311,-26.8967904,769.4927469,402.8663385,687.2994736,628.0011955,559.2260126,994.5326491,899.7901557,1100.357267,66.85505171,301.1971339,848.683335,1246.836141,387.5188874,2703.229952,621.7486412,798.2090701,110.6335838,146.7926576,974.3949328,1112.6734,988.6877129,123.8386653,1382.41821,879.7135436,294.5184461,227.9917587,781.203802,579.7672607,652.8287154,83.74755345,185.7425272,341.7532524,526.1032153,390.597089,588.7499106,1072.818773,239.4243461,567.5070549,644.2695627,1284.749945,238.0915815,690.416634,623.7122936,1101.796283,223.0426687,223.409478,64.33151238,583.5811336,1206.627579,170.205711,14.07931086,699.7656627,1180.68135,124.1644334,975.3431607,815.3268564,282.7622887,728.0060441,1427.284017,1288.138683,349.302241,314.2712238,392.2639667,531.2364374,-29.2238599,99.77485213,292.3865469,235.8712119,416.3711784,36.27541503,846.1838116,1548.835847,72.6354082,556.209269,1423.395218,542.4149687,683.2757137,124.349584,480.8620525,253.3940504,398.6567408,688.8716239,239.0707275,75.20598504,1747.615297,161.0804455,475.4025852,92.50524377,56.98356297,1052.547455,649.0896647,502.2245866,1485.822086,75.82229502,285.5797046,0.3126739,373.4676808,294.4933535,998.346287,322.8803519,143.4663173,1026.369636,-18.4412353,264.4621656,192.4094181,1171.760929,769.2583132,262.2193285,990.8564815,333.1639469,220.4469681,1203.668652,137.1565765,327.8797267,435.1699198,4.74289494,36.65806515,460.4773662,224.8135612,371.0951967,222.656563,1039.330735,208.1350442,-42.3488653,519.369579,1157.539495,984.0067495,209.9905946,361.9072192,395.4830025,109.9250672,154.7698016,1094.591136,1395.95507,212.9431716,385.8078715,969.933832,377.6592378,543.5024355,-46.5629333,718.6863098,1227.297193,558.4717862,285.3004612,348.3595184,710.515847,486.4388487,1455.198996,279.0495473,564.7124227,670.029311,606.1448545,1125.317772,507.133814,144.9687882,147.4016664,682.7762568,1023.525502,706.069536,266.3523685,383.4310816,1057.388526,916.5082731,474.6190399,243.5630143,1666.991087,307.8815699,243.8837284,1385.399088,562.2873952,46.96917175,740.3567293,24.86338341,1251.454079,278.2840192,1344.229955,241.0718806,954.150626,609.4037365,1269.014076,644.6038472,196.6135769,654.3889979,-7.5190865,1760.846735,771.3723568,1539.759466,160.2674022,-30.8703464,1664.742644,658.5120738,390.3851901,773.4979568,519.1159586,-34.058101,1430.121953,1360.067527,398.8724534,1046.159949,369.2555803,58.52773827,1036.956233,663.9321989,707.6132776,917.0411668,278.7478833,1124.218566,114.6736606,126.1020081,596.3823334,224.2219342,308.9492568,1128.956322,290.4360201,343.3839354,341.4416795,1382.609271,-7.267432,599.6005608,1055.569334,472.3458944,1865.586105,683.9166558,1682.539232,201.6014488,132.5054618,691.0969485,122.9179593,-41.9880699,694.6069329,469.8788595,388.8734554,1044.250899,663.9231213,275.3533927,811.6491796,86.17439536,426.4944957,41.27906272,1497.847001,676.719672,156.4822239,306.5898399,137.250017,541.1163186,964.8411285,179.9429226,1126.668237,1318.691539,81.27217223,573.0926397,299.1183874,558.4665501,300.2184881,281.6188412,873.8480606,39.95719935,95.05695898,271.7158633,946.6256792,86.02739124,326.7194039,1045.005348,1198.190364,434.0451528,736.6640156,102.1627214,253.4892747,51.61974602,646.1702432,41.17230131,379.0075806,675.2984747,340.4352514,1582.759772,817.1570231,757.4664952,1123.716514,447.7161078,600.2865942,405.8608659,707.8384834,146.7808379,-34.315967,631.7229853,672.9806759,1068.525735,598.8867057,310.4352954,144.7019014,112.5400802,2289.519483,929.707185,103.6927634,362.532208,328.3054339,785.8955428,-1.7871406,603.2283711,195.7124682,608.2245219,99.26612548,337.1082832,53.65162422,1327.73521,114.6835325,972.3730041,562.9837718,305.3902779,715.6412359,342.4868591,169.4396802,130.3405612,316.5688227,-34.7542174,-29.2206308,674.048922,153.4505573,611.3790056,489.6051844,1150.674779,1215.699967,1163.606773,313.7423755,495.1319366,-24.2699781,459.2904024,199.2175174,991.8126105,222.7975635,40.62521856,902.1492239,815.4534756,122.9762047,155.6907677,1260.33003,521.310038,44.62740049,845.3747581,930.3473771,846.1854737,36.48438494,965.3645483,295.9686493,348.7671939,93.69212775,337.6666508,803.31479,998.3960699,716.8784167,73.43417438,262.4738495,671.2476403,126.3625662,338.1988089,1091.142916,414.281207,51.46065117,589.5239247,768.0924631,223.9421596,595.0064592,911.8379702,793.5490873,1103.824925,600.7659445,737.8284213,216.0254433,413.7213965,30.01109011,1768.28813,196.1762252,1209.514986,1876.428646,288.5387742 };
	std::vector<double> conDate = { 100.8691332,100.0161378,98.47890901,105.0646877,107.5568902,92.77124625,106.438905,116.8735494,103.798205,105.228407,95.05382983,106.8885547,105.8807526,93.21497666,101.1278296,113.5912192,110.1884331,97.65527215,93.94679969,113.8251354,87.08701575,94.29219239,120.4828186,109.5908254,106.4948994,107.5549762,92.84741509,104.5753518,122.1283158,102.8497602,106.916867,93.28572419,88.0984557,113.228264,114.6752862,90.15022066,98.54066634,101.9610136,86.00879737,119.5599613,98.55695756,102.3026187,98.78740803,118.5844773,105.6380772,100.0836552,92.98310682,120.6794844,95.81091712,108.918833,100.5202759,102.5660285,99.09772541,101.1957243,101.0514597,105.8522624,100.4610913,98.63937012,92.97875874,96.29850594,104.3005361,109.2277141,106.8915651,101.8882632,112.8692792,106.7093081,106.2054629,105.0090971,110.8087533,120.3471845,111.8661816,103.4587464,114.1619742,116.6549189,113.6763587,113.041529,115.7757778,106.3545919,106.0505253,107.5620382,100.063607,107.0169644,108.52187,102.2233572,93.57622173,103.8205191,123.2510926,109.907667,87.36540563,101.0947601,86.21214829,89.51058339,109.8995783,124.6887431,95.47468717,98.61105038,118.4846873,110.5968751,100.649741,101.9654737,114.805852,109.4942916,92.1149197,98.71556083,100.8632342,100.0429196,87.78485683,102.4168806,118.9025371,104.1292697,100.1122987,125.6202248,82.90970632,97.80278364,102.8964775,115.0633759,99.40107374,105.1145406,94.16275816,106.2907773,102.2128735,98.75054168,98.49538682,110.5853987,112.2092639,101.0100853,102.6117582,110.755774,116.4537464,101.5742315,108.0527996,92.98277471,105.8398986,102.9214252,104.3017054,103.4501893,105.0685941,111.4729659,101.978573,91.13993389,103.0137005,94.27337869,110.7375517,99.80903612,100.7898979,104.4089079,100.2198241,84.58045109,103.1510009,104.7093207,105.6418473,105.6058307,101.8910585,109.601464,105.9546075,107.2264869,111.5640318,93.51067689,110.6746005,92.53621204,110.4266732,112.667121,103.459811,96.34646549,93.63461784,100.7630335,122.6462547,91.57699203,88.62738752,115.3182968,112.8909414,97.48759462,106.587235,103.0665952,101.2988426,94.24826527,116.2423626,105.6264441,103.9479811,101.5878154,95.99251921,108.8660223,104.7903961,94.98484572,104.3189913,101.1726454,115.6590713,99.23187683,100.7578053,120.9528096,116.3586884,98.11970386,113.1784963,91.7642566,108.3501567,112.7145469,109.0398025,95.00331129,93.66698816,94.52832873,97.4860696,101.782905,102.9178074,84.2718271,100.6358666,98.70789871,89.45209847,101.2302368,114.2370465,117.2005737,95.29470861,110.3905787,104.8488443,88.00510205,109.7498783,107.421274,92.38823522,85.34985994,114.8368864,109.1550574,104.2256706,107.864094,110.826492,107.9402967,103.621883,105.9760264,111.7823939,109.8699028,88.89901354,106.1407492,105.8199453,97.66732681,117.650322,101.4619399,93.92041797,103.2832988,102.3965237,106.2210981,108.6111087,110.9609442,112.9963822,95.69841816,103.5825963,99.16044634,121.0423848,100.4868325,91.43973569,105.9961565,105.6009797,109.9294891,102.7386855,112.3867808,106.9753711,91.72077,109.6809893,106.1442173,109.8791887,92.58101281,96.21430252,101.2776391,90.54141808,99.51700182,110.0525305,101.1268339,105.5895028,114.3757024,104.9315088,107.1382494,112.8160986,104.208941,97.64144244,112.4147785,112.2041507,102.2130078,88.90991487,96.26645014,103.1906581,103.8136847,109.4508556,91.96301773,93.22342149,109.8736159,106.5677334,106.3536634,100.148479,100.0581928,90.55928152,105.6579905,95.76256277,106.3892569,109.9370864,96.31221006,111.4953411,109.1224102,102.9954281,112.9250685,103.2916586,106.3752629,99.25093468,103.0828044,102.7584344,112.3458294,99.52269558,100.4098871,100.1224928,94.61858275,105.1741235,91.0617107,120.4592487,113.9306769,115.7947708,103.9050169,100.2326115,107.1137811,108.152572,102.7152196,91.82443699,92.51173875,98.17733869,103.8410199,110.9334466,99.00610183,103.8132503,115.8212421,114.028744,100.0684525,92.19152298,115.3286671,99.76967761,103.6314476,103.5057109,97.98616975,104.2549582,102.6801346,112.8476184,87.04937886,100.6172764,110.0469485,104.3832904,105.331497,116.3912031,112.5650686,93.14535803,101.3542956,100.4457165,109.8108198,102.0326813,97.5246841,116.8553209,106.5298355,108.8369014,116.0259979,119.1586703,98.60170953,100.4977429,108.0405021,96.67793952,95.36261226,111.362475,92.98926653,105.9269728,99.34801103,108.3411794,104.2800637,111.6647227,97.934585,89.95261833,97.89110819,97.78043393,102.973302,96.07807056,108.436813,99.27721178,91.38047505,105.4661859,94.87486907,84.51422854,113.9919753,112.4580981,83.76800209,104.6854518,99.20857761,103.271481,94.76356703,97.37009372,113.3603663,103.2574439,100.6345453,105.4254202,100.7718911,103.0464358,108.4783525,95.10046907,107.585923,117.9479019,104.8873513,96.38729215,100.1334323,95.8563718,123.9264507,106.4232602,117.0467066,101.5505527,88.23266511,100.9047034,91.51514112,87.37497093,95.61705827,105.1099901,111.4103452,112.9100406,100.3646293,99.64543526,111.6865526,90.68387711,101.270177,87.77906876,104.744457,112.9887848,87.63166914,97.90767588,98.67487326,97.99882403,105.7889086,95.63642998,104.1692998,93.90500465,101.8322656,106.7666669,116.0075046,100.9352668,94.50364226,102.5867787,89.77440214,91.39749823,94.70813099,113.4779832,88.86593689,103.6293831,121.3930543,113.3107257,99.9275511,88.52512272,97.08391615,89.78314039,111.4401754,104.6876022,93.26943983,118.8590017,97.59745021,96.82150458,106.7800053,116.5704616,104.1682582,102.9448567,111.4412831,117.7140529,96.468344,116.65954,85.55561567,100.8371221,111.5182646,106.2370551,102.6042547,106.1225539,112.355183,81.39129649,96.25562669,107.1673775,92.82189207,111.9963528,104.0477714,107.1912273,107.4711934,98.68854818,95.84461374,92.8923612,108.4562654,108.3354911,107.2571637,101.3235362,107.6787396,104.9213698,122.2501437,95.09736598,103.0618071,108.7358742,105.0946629,105.4493852,112.7181093,108.9264348,96.41151734,93.33931015,95.87163893,99.24080953,101.6698218,112.7185295,103.0363969,99.64466902,93.46981995,118.9691014,85.42707077,108.798644,128.1070536,97.32974621,121.5766539,88.96284489,109.0702122,99.94396863,107.2217684,108.8821617,95.83142101,109.2041658,113.6566872,109.613321,100.7806453,108.1333376,103.5545375,115.0591137,105.8768023,99.6188335,87.9971943,99.84062402,114.5928885,114.366151,102.8716758,113.9389309,96.81344174,101.3505548,98.92888902,103.9126959,106.937386,114.0856845,102.7929591,91.34603085,113.0009844,106.1765635,97.25896174,103.3005379,104.3961109,98.44361324,105.5946275,101.9515082,94.82534102,101.4330667,99.70532022,97.79125851,126.5605864,99.52733147,92.90441136,107.9614276,109.9790023,112.7329624,108.7802691,85.02480787,106.6980651,103.1041342,86.75450617,111.219242,108.597975,113.694497,98.8915861,100.8171795,93.3205245,111.999245,90.1117777,108.6832628,103.6553257,99.02826982,92.66074907,117.3540073,113.1984728,114.2247579,102.9811941,99.03786257,94.84922395,111.8351173,103.271663,102.145604,116.4361208,111.4039633,98.86811598,96.22714955,99.95884227,115.9682975,112.7924855,104.2158079,103.9289216,115.0541301,101.8309674,110.065527,112.4980791,101.9299132,114.3831078,93.52296154,101.7237725,89.87712651,101.7125186,97.3297037,84.97054477 };
	std::vector<double> kidDate = { 250.8691332,250.0161378,248.478909,255.0646877,257.5568902,242.7712462,256.438905,266.8735494,253.798205,255.228407,245.0538298,256.8885547,255.8807526,243.2149767,251.1278296,263.5912192,260.1884331,247.6552722,243.9467997,263.8251354,237.0870157,244.2921924,270.4828186,259.5908254,256.4948994,257.5549762,242.8474151,254.5753518,272.1283158,252.8497602,256.916867,243.2857242,238.0984557,263.228264,264.6752862,240.1502207,248.5406663,251.9610136,236.0087974,269.5599613,248.5569576,252.3026187,248.787408,268.5844773,255.6380772,250.0836552,242.9831068,270.6794844,245.8109171,258.918833,250.5202759,252.5660285,249.0977254,251.1957243,251.0514597,255.8522624,250.4610913,248.6393701,242.9787587,246.2985059,254.3005361,259.2277141,256.8915651,251.8882632,262.8692792,256.7093081,256.2054629,255.0090971,260.8087533,270.3471845,261.8661816,253.4587464,264.1619742,266.6549189,263.6763587,263.041529,265.7757778,256.3545919,256.0505253,257.5620382,250.063607,257.0169644,258.52187,252.2233572,243.5762217,253.8205191,273.2510926,259.907667,237.3654056,251.0947601,236.2121483,239.5105834,259.8995783,274.6887431,245.4746872,248.6110504,268.4846873,260.5968751,250.649741,251.9654737,264.805852,259.4942916,242.1149197,248.7155608,250.8632342,250.0429196,237.7848568,252.4168806,268.9025371,254.1292697,250.1122987,275.6202248,232.9097063,247.8027836,252.8964775,265.0633759,249.4010737,255.1145406,244.1627582,256.2907773,252.2128735,248.7505417,248.4953868,260.5853987,262.2092639,251.0100853,252.6117582,260.755774,266.4537464,251.5742315,258.0527996,242.9827747,255.8398986,252.9214252,254.3017054,253.4501893,255.0685941,261.4729659,251.978573,241.1399339,253.0137005,244.2733787,260.7375517,249.8090361,250.7898979,254.4089079,250.2198241,234.5804511,253.1510009,254.7093207,255.6418473,255.6058307,251.8910585,259.601464,255.9546075,257.2264869,261.5640318,243.5106769,260.6746005,242.536212,260.4266732,262.667121,253.459811,246.3464655,243.6346178,250.7630335,272.6462547,241.576992,238.6273875,265.3182968,262.8909414,247.4875946,256.587235,253.0665952,251.2988426,244.2482653,266.2423626,255.6264441,253.9479811,251.5878154,245.9925192,258.8660223,254.7903961,244.9848457,254.3189913,251.1726454,265.6590713,249.2318768,250.7578053,270.9528096,266.3586884,248.1197039,263.1784963,241.7642566,258.3501567,262.7145469,259.0398025,245.0033113,243.6669882,244.5283287,247.4860696,251.782905,252.9178074,234.2718271,250.6358666,248.7078987,239.4520985,251.2302368,264.2370465,267.2005737,245.2947086,260.3905787,254.8488443,238.0051021,259.7498783,257.421274,242.3882352,235.3498599,264.8368864,259.1550574,254.2256706,257.864094,260.826492,257.9402967,253.621883,255.9760264,261.7823939,259.8699028,238.8990135,256.1407492,255.8199453,247.6673268,267.650322,251.4619399,243.920418,253.2832988,252.3965237,256.2210981,258.6111087,260.9609442,262.9963822,245.6984182,253.5825963,249.1604463,271.0423848,250.4868325,241.4397357,255.9961565,255.6009797,259.9294891,252.7386855,262.3867808,256.9753711,241.72077,259.6809893,256.1442173,259.8791887,242.5810128,246.2143025,251.2776391,240.5414181,249.5170018,260.0525305,251.1268339,255.5895028,264.3757024,254.9315088,257.1382494,262.8160986,254.208941,247.6414424,262.4147785,262.2041507,252.2130078,238.9099149,246.2664501,253.1906581,253.8136847,259.4508556,241.9630177,243.2234215,259.8736159,256.5677334,256.3536634,250.148479,250.0581928,240.5592815,255.6579905,245.7625628,256.3892569,259.9370864,246.3122101,261.4953411,259.1224102,252.9954281,262.9250685,253.2916586,256.3752629,249.2509347,253.0828044,252.7584344,262.3458294,249.5226956,250.4098871,250.1224928,244.6185827,255.1741235,241.0617107,270.4592487,263.9306769,265.7947708,253.9050169,250.2326115,257.1137811,258.152572,252.7152196,241.824437,242.5117388,248.1773387,253.8410199,260.9334466,249.0061018,253.8132503,265.8212421,264.028744,250.0684525,242.191523,265.3286671,249.7696776,253.6314476,253.5057109,247.9861698,254.2549582,252.6801346,262.8476184,237.0493789,250.6172764,260.0469485,254.3832904,255.331497,266.3912031,262.5650686,243.145358,251.3542956,250.4457165,259.8108198,252.0326813,247.5246841,266.8553209,256.5298355,258.8369014,266.0259979,269.1586703,248.6017095,250.4977429,258.0405021,246.6779395,245.3626123,261.362475,242.9892665,255.9269728,249.348011,258.3411794,254.2800637,261.6647227,247.934585,239.9526183,247.8911082,247.7804339,252.973302,246.0780706,258.436813,249.2772118,241.3804751,255.4661859,244.8748691,234.5142285,263.9919753,262.4580981,233.7680021,254.6854518,249.2085776,253.271481,244.763567,247.3700937,263.3603663,253.2574439,250.6345453,255.4254202,250.7718911,253.0464358,258.4783525,245.1004691,257.585923,267.9479019,254.8873513,246.3872922,250.1334323,245.8563718,273.9264507,256.4232602,267.0467066,251.5505527,238.2326651,250.9047034,241.5151411,237.3749709,245.6170583,255.1099901,261.4103452,262.9100406,250.3646293,249.6454353,261.6865526,240.6838771,251.270177,237.7790688,254.744457,262.9887848,237.6316691,247.9076759,248.6748733,247.998824,255.7889086,245.63643,254.1692998,243.9050046,251.8322656,256.7666669,266.0075046,250.9352668,244.5036423,252.5867787,239.7744021,241.3974982,244.708131,263.4779832,238.8659369,253.6293831,271.3930543,263.3107257,249.9275511,238.5251227,247.0839161,239.7831404,261.4401754,254.6876022,243.2694398,268.8590017,247.5974502,246.8215046,256.7800053,266.5704616,254.1682582,252.9448567,261.4412831,267.7140529,246.468344,266.65954,235.5556157,250.8371221,261.5182646,256.2370551,252.6042547,256.1225539,262.355183,231.3912965,246.2556267,257.1673775,242.8218921,261.9963528,254.0477714,257.1912273,257.4711934,248.6885482,245.8446137,242.8923612,258.4562654,258.3354911,257.2571637,251.3235362,257.6787396,254.9213698,272.2501437,245.097366,253.0618071,258.7358742,255.0946629,255.4493852,262.7181093,258.9264348,246.4115173,243.3393102,245.8716389,249.2408095,251.6698218,262.7185295,253.0363969,249.644669,243.46982,268.9691014,235.4270708,258.798644,278.1070536,247.3297462,271.5766539,238.9628449,259.0702122,249.9439686,257.2217684,258.8821617,245.831421,259.2041658,263.6566872,259.613321,250.7806453,258.1333376,253.5545375,265.0591137,255.8768023,249.6188335,237.9971943,249.840624,264.5928885,264.366151,252.8716758,263.9389309,246.8134417,251.3505548,248.928889,253.9126959,256.937386,264.0856845,252.7929591,241.3460308,263.0009844,256.1765635,247.2589617,253.3005379,254.3961109,248.4436132,255.5946275,251.9515082,244.825341,251.4330667,249.7053202,247.7912585,276.5605864,249.5273315,242.9044114,257.9614276,259.9790023,262.7329624,258.7802691,235.0248079,256.6980651,253.1041342,236.7545062,261.219242,258.597975,263.694497,248.8915861,250.8171795,243.3205245,261.999245,240.1117777,258.6832628,253.6553257,249.0282698,242.6607491,267.3540073,263.1984728,264.2247579,252.9811941,249.0378626,244.8492239,261.8351173,253.271663,252.145604,266.4361208,261.4039633,248.868116,246.2271495,249.9588423,265.9682975,262.7924855,254.2158079,253.9289216,265.0541301,251.8309674,260.065527,262.4980791,251.9299132,264.3831078,243.5229615,251.7237725,239.8771265,251.7125186,247.3297037,234.9705448 };
	std::vector<int> vetRep(600, 1);
	std::vector<int> abStatus(600, 0);
	std::vector<int> shedClass(600, 0); //low=0 or high=1 shedder 
	
	//int I_0 = 1;

	double t = t_start, u = 0.0;
	int tot_pop = ventry.size();
	double rval; //rval will store random samples 0 to 1 - check if problem declaring globally

//cout << "check 1" << endl;

	// create vector vstate
	// state vector of the population
	// vstate = 0   means SNP
	// vstate = 1   means SP
	// vstate = 2   means INP
	// vstate = 3   means IP
	// vstate = 4   means RNP
	// vstate = 5   means RP
	// vstate = 6   means Y
	// vstate = 7   means IP2
	// vstate = 8   means JNP

	std::vector<int> vstate(tot_pop);
	for (unsigned int i = 0; i < vstate.size(); i++) { if (vexit.at(i) < 103) { vstate[i] = 6; } }   //this are Y
	for (unsigned int i = 0; i < vstate.size(); i++) { if (vexit.at(i) > 103 && conDate.at(i) > t_start) { vstate[i] = 0; } }   //this are SNP
	for (unsigned int i = 0; i < vstate.size(); i++) { if (vexit.at(i) > 103 && conDate.at(i) <= t_start) { vstate[i] = 1; } }  //this are SP
	std::vector<int> subVstate = whichFunc(vstate, 0);
	int index = runif_int(0, subVstate.size() - 1, rng);
	vstate[index] = 3;  //this are IP
	//sample abortion date for this goat
	kidDate[index] = kidDate[index] - runif(0.0, 50.0, rng);
	shedClass[index] = 1;
	
	//extract init conditions from vstate
	int SNP = std::count(vstate.begin(), vstate.end(), 0);
	int SP = std::count(vstate.begin(), vstate.end(), 1);
	int INP = std::count(vstate.begin(), vstate.end(), 2);
	int IP = std::count(vstate.begin(), vstate.end(), 3);
	int RNP = std::count(vstate.begin(), vstate.end(), 4);
	int RP = std::count(vstate.begin(), vstate.end(), 5);
	int Y = std::count(vstate.begin(), vstate.end(), 6);
	int IP2 = std::count(vstate.begin(), vstate.end(), 7);
	int JNP = std::count(vstate.begin(), vstate.end(), 8);

	//name parameters
	double gamma = par[0], muE = par[1], phi = par[2], fI = par[3], iP = par[4], alpha = par[5], omega = par[6];
	double E = 0, rates[4];
	
	// vectors to store outputs
	std::vector<double> t_vec, E_vec;

	t_vec.push_back(t);
	E_vec.push_back(E);
	std::vector<int> SNP_vec, SP_vec, INP_vec, IP_vec, IP2_vec, JNP_vec, RNP_vec, RP_vec, Y_vec;

	SNP_vec.push_back(SNP);
	SP_vec.push_back(SP);
	INP_vec.push_back(INP);
	IP_vec.push_back(IP);
	IP2_vec.push_back(IP2);
	JNP_vec.push_back(JNP);
	RNP_vec.push_back(RNP);
	RP_vec.push_back(RP);
	Y_vec.push_back(Y);
	//A_vec.push_back(A);

	//create array to store nkid nkif and nabo. this is the output for the ABC
	#define ncol  5 //0.year 1.age 2.nkid 3.nkif 4.abort
	#define nrow  300 //space to run 20 years and goats up to 10 yo

	#define nkid 2  //this are just constants to call columns by name
	#define nkif 3
	#define nabo 4

	NumericMatrix myArray (nrow, ncol);
	int n;

	//enter calendar year
	for (n=0; n<nrow; n++)
    {
      myArray(n, 0)=floor(n/10);
    }
	//age index
  	for (n=0; n<nrow; n++)
    {
      myArray(n, 1)=n%10;
    }

//cout << "check 2" << endl;

	// Start the loop

	while (t < t_end) {

		// Calculate cumulative rates
		rates[0] = SNP*(1-pow(2.718,-E));
		rates[1] = SP*(1-pow(2.718,-E)) + rates[0];
		
		rates[2] = (1 - alpha)*gamma*INP + rates[1];
		rates[3] = (alpha)*gamma*INP + rates[2];
		
		// Draw the time to next event
		double tstep = 365; //when sum of rates = 0, long tstep. see if you can stop simulation here

		if (rates[3] > 0) {
			tstep = rweibull(1/rates[3], 1.0, rng_bf);
		}

		// Check if t+tstep jumps over a non-markov event
		double value = t + tstep;
		int nmEvent;

		// find the nearest non-markov event 'nmEvent' at time 'value'
		for (int i = 0; i < tot_pop; i++) { if (ventry[i] > t && ventry[i] < value) { value = ventry[i]; nmEvent = 1; index = i; } }    //nmEvent 1 = entry
		for (int i = 0; i < tot_pop; i++) { if (vexit[i] > t && vexit[i] < value) { value = vexit[i]; nmEvent = 2; index = i; } }       //nmEvent 2 = exit
		for (int i = 0; i < tot_pop; i++) { if (conDate[i] > t && conDate[i] < value) { value = conDate[i]; nmEvent = 3; index = i; } } //nmEvent 3 = conception
		for (int i = 0; i < tot_pop; i++) { if (kidDate[i] > t && kidDate[i] < value) { value = kidDate[i]; nmEvent = 4; index = i; } } //nmEvent 4 = kidding

//cout << index << "; " << nmEvent << "; " << value <<  "; " << vstate[index] << endl;

		// Do non-markov -------------------------------------------------------------------------------------------------
		if (t < value && t + tstep > value) {

			tstep = value - t;             // new tstep is distance to nearest non-markov

			// entry ---------------------------------
			if (nmEvent == 1) {
				vstate[index] = 0;
				//sample a new exit date
				vexit[index] = value + rweibull(944.511173, 1.879887, rng);
				//reset abort column. do the same with vetRep
				abStatus[index] = 0;
				shedClass[index] = 0;
			}

			// exit ----------------------------------
			if (nmEvent == 2) {
				vstate[index] = 6;
				//sample a new entry date
				if (mod(value, 365, 1) < 313) {
					ventry[index] = value + (313 - mod(value, 365, 1)) + rweibull(1/0.214, 1.0, rng);
				} else {
					ventry[index] = value + (365 - mod(value, 365, 1)) + 313 + rweibull(1/0.214, 1.0, rng);
				}
			}

			// conception ----------------------------
			if (nmEvent == 3) {
				bool abort = false;
				if (vetRep[index] == 1) {
					if (vstate[index] == 0 || vstate[index] == 4) { vstate[index] = vstate[index] + 1; } // If SNP or RNP move to SP and RP, respectively
					if (vstate[index] == 2 || vstate[index] == 8) { //if INP or JNP determine if aborts & shedClass
						rval = runif(0.0, 1.0, rng);
						if (rval <= fI) { abort = true; }
						vstate[index] = 3; // move to IP
						//define shedClass
						double mixWho = runif(0.0, 1.0, rng); //define if shedClass 1 or 0
						if (mixWho <= omega) {
							shedClass[index] = 1;
						} else {
							shedClass[index] = 0;
						}				
					}
				}
				//sample a new kidding date. we do this for all, those that conceive and those that didn't
				kidDate[index] = conDate[index] + 150;
				if (abort) {
					kidDate[index] = kidDate[index] - runif(0.0, 50.0, rng);
					shedClass[index] = 1;
				}
			}

			// kidding (or abortion) ------------------
			if (nmEvent == 4) {
			
				rval = runif(0.0, 1.0, rng);				
				if (vetRep[index] == 1 && vstate[index] != 6) { //pregnant and not Y (dead)
				
					if (vstate[index] == 1 || vstate[index] == 5) { vstate[index] = vstate[index] - 1; } //if SP or RP move to SNP/RNP, respectively
					
					if (vstate[index] == 3) { //if infected 
						
						//testFirst = testFirst + 1; //need to know if it is the introduced goat


						if (rval <= alpha) {             //is it going to be a persistently infected goat?
							vstate[index] = 8;    //moves to JNP
						} else {
							vstate[index] = 4;     //moves to RNP
						}
						
						if(kidDate[index] - conDate[index] == 150){    //normal gestation length
							int year = floor(value/365);
							int age = floor((value-ventry[index])/365);
							myArray(year*10+age, nkif) = myArray(year*10+age, nkif)+1;   //counts as nkif (kidded as infected)
							//check shedClass to assing shedding
							if (shedClass[index] == 1) { //omega is prop of high shedders
								E = E + (pow(10,rnorm (6.753013, 1.4133656, rng))/pow(10,6.75)); //high-shedder
							} else {
								E = E + (pow(10,rnorm (1.973731, 0.6792576, rng))/pow(10,6.75)); //low-shedder
							}
						}
												
						abStatus[index] = 0;
						if ((kidDate[index] - conDate[index]) < 150) {  //abortion
							abStatus[index] = 1;
							int year = floor(value/365);
							int age = floor((value-ventry[index])/365);
							myArray(year*10+age, nabo) = myArray(year*10+age, nabo)+1; //adds an abortion to the count
							E = E + (pow(10,rnorm (6.753013, 1.4133656, rng))/pow(10,6.75));  //use weibull distribution to assign epsilon_p
						}
					}
					
					if (vstate[index] == 7) {
						if (rval <= alpha) {
						vstate[index] = 8;
						} else {
						vstate[index] = 4;
						}
					}
					
					if (abStatus[index] == 0){
						int year = floor(value/365);
						int age = floor((value-ventry[index])/365);
						myArray(year*10+age, nkid) = myArray(year*10+age, nkid)+1; //if it wasn't abortion then it's a kidding event
					}
				}
				
				//sample a new conception date
				conDate[index] = rnorm((103 + 365 * (floor(value / 365) + 1)), 8.77, rng);
				
				//sample 0 or 1 for vetRep here (for next cycle)
				rval = runif(0.0, 1.0, rng);
				if (rval <= phi) {
					vetRep[index] = 1;
				} else {
					vetRep[index] = 0;
				}

			}

		} else {
			
			// Do markov event i
			u = runif(0.0, rates[3], rng);
			int i = 0;
			double t_inf;
			while (rates[i] < u) i++;

			switch (i) {
			case 0:	subVstate = whichFunc(vstate, 0);                //beta*SNP*E/N
				index = subVstate[runif_int(0, subVstate.size() - 1, rng)];
				vstate[index] = 2; break;


			case 1: subVstate = whichFunc(vstate, 1);      // beta*SP*E)/N
				index = subVstate[runif_int(0, subVstate.size() - 1, rng)];

				t_inf = t + tstep; // time of infection
				if ((t_inf + iP) > kidDate[index]) { //if infection+iP is beyond kiddingDate then it's an IP2 (late infection)
					vstate[index] = 7;
				} else {
				
					vstate[index] = 3;
					double mixWho = runif(0.0, 1.0, rng); //define if shedClass 1 or 0
					if (mixWho <= omega) {
						shedClass[index] = 1;
					} else {
						shedClass[index] = 0;
					}				
								
					bool abort = false;
					rval = runif(0.0, 1.0, rng);
					if (rval <= fI) { abort = true; } //define if aborts and change kidding date accordingly
					if (abort) {
						if ((t_inf + iP) < kidDate[index] - 50) {
							kidDate[index] = kidDate[index] - runif(0.0, 50.0, rng);
						} else {
							kidDate[index] = t_inf + iP;
						}
						shedClass[index] = 1; //if abort then necessarily shedClass 1
					}
				} break;

			case 2: subVstate = whichFunc(vstate, 2);                    // (1-alpha)*gamma*INP
				index = subVstate[runif_int(0, subVstate.size() - 1, rng)];
				vstate[index] = 4; break;

			case 3: subVstate = whichFunc(vstate, 2);                    // alpha*gamma*INP
				index = subVstate[runif_int(0, subVstate.size() - 1, rng)];
				vstate[index] = 8; break;
			}
		}

		//update time
		t += tstep;

		//update environment contamination
		E -= E * tstep*muE; //E += (INP + IP + IP2 + JNP)*epsilon_f*tstep; //this version does not have shedding in feces (too complicated already!)
		if (E < 0) { //environment can never be negative
			E = 0;
		}

//cout << "check 3: t = " << t << endl;

		//re-calculate size of compartments
		SNP = std::count(vstate.begin(), vstate.end(), 0);
		SP = std::count(vstate.begin(), vstate.end(), 1);
		INP = std::count(vstate.begin(), vstate.end(), 2);
		IP = std::count(vstate.begin(), vstate.end(), 3);
		RNP = std::count(vstate.begin(), vstate.end(), 4);
		RP = std::count(vstate.begin(), vstate.end(), 5);
		Y = std::count(vstate.begin(), vstate.end(), 6);
		IP2 = std::count(vstate.begin(), vstate.end(), 7);
		JNP = std::count(vstate.begin(), vstate.end(), 8);

		//write to vectors
		t_vec.push_back(t);
		SNP_vec.push_back(SNP);
		SP_vec.push_back(SP);
		INP_vec.push_back(INP);
		IP_vec.push_back(IP);
		IP2_vec.push_back(IP2);
		JNP_vec.push_back(JNP);
		RNP_vec.push_back(RNP);
		RP_vec.push_back(RP);
		Y_vec.push_back(Y);
		//A_vec.push_back(A);
		E_vec.push_back(E);
	}

//cout << "check 10" << endl;

/*----------------------------*/
/*----------------------------*/
/*----------------------------*/
//  Returns to R ----------------------------------------------
/*
	List ret;
	ret["time"] = t_vec;
	ret["SNP"] = SNP_vec;
	ret["SP"] = SP_vec;
	ret["INP"] = INP_vec;
	ret["IP"] = IP_vec;
	ret["IP2"] = IP2_vec;
	ret["JNP"] = JNP_vec;
	ret["RNP"] = RNP_vec;
	ret["RP"] = RP_vec;
	ret["Y"] = Y_vec;
	ret["E"] = E_vec;
	//ret["A"] = A_vec;

	return ret;
*/

	return myArray;
}
